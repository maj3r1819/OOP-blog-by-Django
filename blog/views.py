from django.shortcuts import render #render used to access Templates
from django.http import HttpResponse #handles traffic from the homepage of our blog
from .models import Post



posts = [
        {   'title' : 'A tour of Object-Oriented Programming',
            'date' : 'February 06, 2020' ,
            'author': 'Sampada Petkar',
            'content' : 'Walkthrough Welcome to this Blog Series. This is a part of the OOP course Home assignment based on our implementation of an OOP Design. Before heading towards the design, let us touch upon the importance of the OOP. Object-oriented programming is now the demanding technique in the coder community. Along with the user-friendly approach, exponential data mining gave birth to challenges for big data handling. ‘C’ as the primitive computer language, focuses more on procedural approach simplifying primary ways for problem-solving. Basically, it consists of writing computer understandable list of instructions that are organized as functions. It is much easier to access data. However, OOP treats data as a more sensitive element throughout the chain and does not allow it to flow freely around. Looking a bit inside, it all consists of small classes and objects just like microscopic cells in leaves. It may vary in size, shape but nothing will be outside a single cell. Mutually all are private, protected to each other, but as required content can be shared to respective cells, here classes. This uniqueness is the major motivating factor for topic selection. Data structures are designed such that they characterize the objects. Reservations are booked, updated, canceled and altered. Transactions should occur without loss of data, memory leaks and malfunctions. OOP is the best suite for such problems. As new data and functions can be easily added, dynamic systems are built upon this concept all over the world. Every tiny little system can be viewed as an ‘objected-oriented viewed’ system and split further until you find nothing but objects. As Steve Jobs once said, “Everybody should learn how to program a computer because it teaches you to think!” OOP provides a concrete way to build hypercomplex systems with few tools like polymorphism, dynamic binding, and inheritance. It is beyond just writing a few liner codes. It is beyond sitting next to Personal Computer and collecting snippets. It is way farther than compiling a few bytes and sending it to machines. It is a culture. It is a philosophy. It is a constantly growing pool of ideas and innovation. Let us explore this flourishing world of objects. Let us orient with changing dimensions and aspects of the programming community. Let us have a tour!'

        },
    {'title': 'Why OOP',
     'date': 'February 07, 2020',
     'author': 'Sagar Potnis',
      'content' : 'Just as the name suggests this programming method uses objects. OOP aims to implement properties like inheritance, hiding, polymorphism, encapsulation, etc in programming. The main aim of OOP is to clamp together all the data and the functions that bind them so that no other part of the code can access a particular data except that prescribed function. It basically helps us to write more efficient code using way lesser lines than generally needed. OOP is an archetype to design a program using classes and objects, it basically simplifies software development and maintenance. It is a method of solving enigmatic problems by breaking them into smaller problems using objects. Before OOP, programs were written like a procedure, in a step by step sequence, they were like a long list of instructions. But the OOP is about creating objects and classes that will interact with each other and perhaps form some kind of hierarchy among themselves for more efficient code.Advantage of OOP over Procedure-oriented programming language: In OOP we can easily develop and change the code easily and efficiently by just editing the classes and the functions used. Whereas in Procedural oriented programming it is quite cumbersome to make changes, rather many generally opt to replace the entire code itself. In OOP we can hide the data whereas in procedural oriented programming if the data is declared globally as a global variable it can be accessed from anywhere. In OOP we can simulate real-world events easily. Solutions to real-world problems can be easily provided using a data flow model in OOP. OOP concept of Inheritance is useful for accessing base class properties into the derived class. So, this increases code reusability and reduces code length. OOP concept of Encapsulation is a data hiding property within a class so that a particular data member can remain private. OOP concept of Polymorphism which uses virtual methods which is useful in overriding class properties and methods. Why have we chosen C++ as a platform to implement our project? Basically, throughout our Engineering course, we have been familiar with C++. Keeping its technical aspects aside we as students have developed a form of an attachment to this language and so there is somewhat of personal bias towards this programming language. Moving on to our benefit C++ is generally preferred over other languages because it supports all the basic general features of OOP in an easy way. In C++ programs are expandable so more features can easily be added and the existing features can be easily modified. This saves time in the software development part. Moreover, all the points mentioned in the above subheading in advantages of OOP are all followed by C++ that are Classes, Inheritance, Encapsulation, etc. so lets not mention them again. So that is particularly why we mutually agreed on C++ to be our platform for this project.'
     },
    {'title': 'Objects and Classes',
     'date': 'February 08, 2020',
     'author': 'Aman Ladkat',
     'content' : 'Basically, as the name suggests ‘objects’ are the fundamental part of Object Oriented Programming. It is nothing but instance of a particular class. They can represent a place or a person or anything that a program has to handle. It is a piece of code which represent real life entity. The combination of both data and function into a single unit and these units are called objects. An object not only knows how to perform certain actions but also it can interact with other elements of the program. At a time of object creation, we don’t require any keyword. We can directly pass values through the objects. An object consists of data member and member functions. Data members specify object’s state and member functions specify its behaviour. Without a class, object doesn’t exist, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration similarly as we declare variables of basic types. Objects not only make the code more efficient but also it becomes easy to understand for everyone. At the same time, it has fast execution and it may have less errors and less memory leakage.Classes in OOP: Class is one of the major pillars that are used in Object Oriented Programming. It is basically collection of objects, we can also called it as a blueprint of an object. Once a class has been defined, we can create infinite number of objects belonging to that class. It is similar to structure in C where we can define variables and methods to utilize by objects. Without objects we can use only static functions of class. It doesn’t occupy memory location. It cannot be manipulated as like of objects because it is not available in memory.  It is defined with the keyword ‘class’. A class contains data members and it has member functions. A class also defines a namespace so classes offer data abstraction(encapsulation) of Object Oriented Programming. Classes have same format as that of data structures except that they can also include functions and they have ‘access specifiers’. There are three access specifiers namely private, public and protected.  By default, functions and data declared within a class are ‘private’, and are accessible inside the definition of the class. While ‘public’ members are accessible everywhere and ‘protected’ members are mostly used only when inheritance is involved and accessible from other members of same class but also from members of their derived class.For example: Let’s take an example of Employee to create our class.  class Employee {                    //Class is defined  public:                                     //Access specifier  int id;                                       //Attribute(int variable)   string name;                           //Attribute(string variable)   float salary;                            //Attribute(float variable)   void display ()                       //Member Function   { cout<<id<<””<<name<<””<<salary<<endl; }   }; A class keyword is used to create a class Employee. Access specifier is public therefore members are accessible outside the class. Variables in the class are id, name and salary which are attributes of Employee and display is a member function.'
     },


        ]

def home(request):
    context = { 'posts': Post.objects.all()}
    return render(request, 'blog/home.html',context)

def about(request):
    return render(request, 'blog/about.html',{'title': 'About'})
